from db import DBHandler
from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardMarkup,
    Update,
)
from telegram.ext import ContextTypes
from utils.tg_bot import logger
from utils.tg_bot.helpers import AuthState, create_access_token


async def send_start_keyboard(
    update: Update, context: ContextTypes.DEFAULT_TYPE
):
    logger.info(
        "–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s",
        update.effective_user.id,
    )
    keyboard = [[KeyboardButton("/start")]]
    reply_markup = ReplyKeyboardMarkup(
        keyboard, resize_keyboard=True, one_time_keyboard=True
    )
    await update.message.reply_text(
        "üëã –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:", reply_markup=reply_markup
    )


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –≤—ã–∑–≤–∞–ª /start", update.effective_user.id)
    buttons = [
        [
            InlineKeyboardButton(
                "üì± –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç—É", callback_data="by_contact"
            )
        ],
        [
            InlineKeyboardButton(
                "üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ –ª–æ–≥–∏–Ω—É –∏ –ø–∞—Ä–æ–ª—é",
                callback_data="by_password",
            )
        ],
    ]
    markup = InlineKeyboardMarkup(buttons)
    await update.message.reply_text(
        "*–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:*",
        parse_mode="MarkdownV2",
        reply_markup=markup,
    )


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    logger.info(
        "–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞: %s –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s",
        query.data,
        update.effective_user.id,
    )

    if query.data == "by_contact":
        context.user_data["auth_state"] = AuthState.BY_TELEGRAM
        kb = [
            [KeyboardButton(text="üì≤ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)]
        ]
        reply_markup = ReplyKeyboardMarkup(
            kb, one_time_keyboard=True, resize_keyboard=True
        )
        await query.message.reply_text(
            "_–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞_ üìû",
            parse_mode="MarkdownV2",
            reply_markup=reply_markup,
        )

    elif query.data == "by_password":
        context.user_data["auth_state"] = AuthState.BY_CREDENTIALS
        await query.message.reply_text(
            "_–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:_ üîë",
            parse_mode="MarkdownV2",
        )


async def contact_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    contact = update.message.contact
    logger.info(
        "–ü–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä: %s –æ—Ç %s",
        contact.phone_number,
        update.effective_user.id,
    )
    user = db.get_user_by_phone(contact.phone_number)

    if not user:
        logger.warning(
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–æ–º–µ—Ä–æ–º %s –Ω–µ –Ω–∞–π–¥–µ–Ω", contact.phone_number
        )
        return await update.message.reply_text(
            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω\\. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞\\."
        )

    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: %s", user.get("username"))
    if not db.get_tg_username(user["id"]):
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ Telegram")
        return await update.message.reply_text(
            "*–í—ã —É–∂–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã —á–µ—Ä–µ–∑ Telegram ü§ñ*",
            parse_mode="MarkdownV2",
        )

    db.set_tg_username(user["id"], update.effective_user.username)
    context.user_data["auth_user"] = user
    await update.message.reply_text(
        "‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—É—á–µ–Ω! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å üîê"
    )


async def password_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    state = context.user_data.get("auth_state")
    user = None

    logger.info(
        "–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–æ–ª—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", update.effective_user.id
    )

    if state == AuthState.BY_TELEGRAM:
        user = context.user_data.get("auth_user")
        if not user:
            return await update.message.reply_text(
                "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\\."
            )

        password = update.message.text
        success, tokens = create_access_token(user["username"], password)

        if not success:
            logger.warning(
                "–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ Telegram —É %s: –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å",
                user["username"],
            )
            return await update.message.reply_text(
                "*–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å üòï*", parse_mode="MarkdownV2"
            )

        db.set_tg_username(user["id"], update.effective_user.username)

    elif state == AuthState.BY_CREDENTIALS:
        try:
            username, password = update.message.text.split()
        except ValueError:
            return await update.message.reply_text(
                "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª."
            )

        success, tokens = create_access_token(username, password)
        if not success:
            logger.warning("–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ –∫—Ä–µ–¥–∞–º —É %s", username)
            return await update.message.reply_text(
                "*–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å üòï*", parse_mode="MarkdownV2"
            )
        user = db.get_user_by_username(username)

    db.set_tg_chat_id(user.get("username"), update.effective_user.id)
    logger.info(
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s —É—Å–ø–µ—à–Ω–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω", user.get("username")
    )
    await update.message.reply_text(
        f"*üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã\\!*\n\n_–í–∞—à —Ç–æ–∫–µ–Ω:_\n```{tokens['access']}```",
        parse_mode="MarkdownV2",
    )
    context.user_data.clear()


async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(
        "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", update.effective_user.id
    )
    keyboard = [[KeyboardButton("/start")]]
    reply_markup = ReplyKeyboardMarkup(
        keyboard, resize_keyboard=True, one_time_keyboard=True
    )
    await update.message.reply_text(
        "ü§ñ –Ø –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à—É –∫–æ–º–∞–Ω–¥—É\\.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:",
        parse_mode="MarkdownV2",
        reply_markup=reply_markup,
    )


db = DBHandler()
